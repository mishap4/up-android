/*
 * Copyright (c) 2024 General Motors GTO LLC
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * SPDX-FileType: SOURCE
 * SPDX-FileCopyrightText: 2024 General Motors GTO LLC
 * SPDX-License-Identifier: Apache-2.0
 */

plugins {
    alias libs.plugins.android.application
    alias libs.plugins.devtools.ksp
    alias libs.plugins.kotlin.android
}

apply from: '../gradle/config.gradle'
apply from: "../gradle/jacoco.gradle"

android {
    namespace config.namespace
    compileSdk config.sdkVersion
    compileSdkVersion config.sdkVersion
    buildToolsVersion config.toolsVersion
    defaultConfig {
        applicationId config.packageId
        minSdk config.minSdkVersion
        targetSdk config.sdkVersion
        versionCode config.versionCode
        versionName config.versionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        ksp {
            arg('room.schemaLocation', "$projectDir/src/main/assets/")
        }
    }
    signingConfigs {
        platform {
            storeFile file('certs/platform.keystore')
            storePassword 'android'
            keyAlias 'platform'
            keyPassword 'android'
        }
    }

    buildTypes {
        debug {
            debuggable true
            minifyEnabled false
            signingConfig signingConfigs.platform
            testCoverageEnabled true
        }
        release {
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.platform
            minifyEnabled false
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    packagingOptions {

    }
    sourceSets {
        test.assets.srcDirs += files("$projectDir/src/test/".toString())
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
            all {
                testLogging {
                    exceptionFormat "full"
                    events 'passed', 'skipped', 'failed'
                    outputs.upToDateWhen { false }
                    showStandardStreams = true
                    jacoco {
                        includeNoLocationClasses = true
                        excludes = ['jdk.internal.*']
                    }
                }
                jvmArgs '-noverify'
            }
        }
    }
}
dependencies {

    implementation libs.android.material
    implementation libs.androidx.ktx
    implementation libs.kotlin.stdlib
    implementation libs.kotlinx.coroutines
    ksp libs.room.compiler
    implementation libs.room.ktx
    implementation libs.up.java
    implementation libs.up.client.android.java

    testImplementation libs.androidx.junit
    testImplementation libs.junit
    testImplementation libs.mockito.core
    testImplementation libs.mockito.inline
    testImplementation libs.robolectric
    testImplementation libs.room.testing
}
